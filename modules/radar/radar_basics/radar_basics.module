<?php
/**
 * @file
 * Code for the Radar Basics feature.
 */

include_once 'radar_basics.features.inc';

/**
 * Implements hook_date_format_types().
 */
function radar_basics_date_format_types() {
  return array(
    'radar_time' => t('Time'),
    'radar_day' => t('Day'),
  );
}

/**
 * Implements hook_date_formats() {
 */
function radar_basics_date_formats() {
  return array(
    array(
      'type' => 'radar_day',
      'format' => 'l j F',
      'locales' => array(),
    ),
    array(
      'type' => 'radar_time',
      'format' => 'H:i',
      'locales' => array(),
    ),
  );
}

/**
 * Implements hook_pathauto_alias_alter().
 *
 * Seems our widget supplying og entityreference sequentially indexed from 0;
 * so tokens relying on the first reference being index 0 don't work.
 */
function radar_basics_pathauto_alias_alter(&$alias, $context) {
  if ($context['module'] == 'node' && ($context['type'] == 'event' || $context['type'] == 'event_ical_importer')) {
    $node =& $context['data']['node'];
    if (empty($node->og_group_ref)) {
      $alias = 'awaiting-group-confirmation/' . $alias;
    }
    else {
      $node->og_group_ref[LANGUAGE_NONE] = array_values($node->og_group_ref[LANGUAGE_NONE]);
      $alias = token_replace($context['pattern'], $context['data'], array(
        'sanitize' => FALSE,
        'clear' => TRUE,
        'callback' => 'pathauto_clean_token_values',
        'language' => (object) array('language' => $context['language']),
        'pathauto' => TRUE,
      ));
      $alias = pathauto_clean_alias($alias);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function radar_basics_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
  case 'user_profile_form':
      // Remove revalidation option if no e-mail supplied.
      if ($form['#user']->mail == NULL && isset($form['revalidate'])) {
        unset($form['revalidate']);
      }
    case 'user_register_form':
      // Make e-mail address optional.
      $form['account']['mail']['#required'] = FALSE;
      $key = array_search('user_account_form_validate', $form['#validate']);
      $form['#validate'][$key] = 'radar_basics_user_account_form_validate';
      break;

    case 'user_pass':
      global $user;
      if ($user->uid >0 && $user->mail == NULL) {
        $form = array('note' => array('#markup' => t('You have not set an e-mail address so no reminder can be sent.')));
      }
      else {
        $form['note'] = array('#markup' => t('This will only work if you have set an e-mail address. No indication will be given if this was the case.'));
      }
  }
}

/**
 * Form validation callback.
 *
 * Performs standard user register validation, fooling the lack of e-mail in
 * registration
 *
 * @see user_account_form_validate().
 */
function radar_basics_user_account_form_validate($form, &$form_state) {
  // If no email value, then stuff a temp one to fool the validation.
  if ($form_state['values']['mail'] == NULL) {
    // A unique non-existent email.
    $form_state['values']['mail'] = 'radar_basics_user_account_form_validate@example.com';
  }
  // Call original system validation.
  user_account_form_validate($form, $form_state);
  // Stuff empty back again.
  if ($form_state['values']['mail'] == 'radar_basics_user_account_form_validate@example.com') {
    $form_state['values']['mail'] = NULL;
  }
}

/**
 * Implements a mail handler that doesn't get upset if there is no e-mail
 * address.
 */
class RadarMailSystem extends DefaultMailSystem implements MailSystemInterface {
  public function mail(array $message) {
    $recipients = $this->getRecipients($message);
    if (empty($recipients)) {
      return TRUE;
    }
    return parent::mail($message);
  }

  protected function getRecipients(array $message) {
    $recipients = array();
    if ($row = $message['to']) {
      $recipients = array_merge($recipients, explode(',', $row));
    }
    foreach (array('cc', 'bcc') as $type) {
      if ($row = isset($message['headers'][$type]) ? $message['headers'][$type] : FALSE) {
        $recipients = array_merge($recipients, explode(',', $row));
      }
    }
    return $recipients;
  }
}

