<?php
/**
 * @file
 * Code for the Radar event feature.
 */

include_once 'radar_event.features.inc';

/**
 * Implements hook_radar_entity_integration().
 */
function radar_event_radar_entity_integration() {
  return array(
    'node' => array(
      'event' => array(
        'is_group_content' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_entity_property_info_alter().
 */
function radar_event_entity_property_info_alter(&$info) {
  $properties = &$info['node']['bundles']['event']['properties'];

  $properties['field_date_time']['property info']['time_start']['getter callback'] = 'radar_event_date_entity_metadata_struct_getter';
  $properties['field_date_time']['property info']['time_end']['getter callback'] = 'radar_event_date_entity_metadata_struct_getter';
  $properties['field_date_time']['property info']['rrule'] = array(
    'type' => 'text',
    'label' => 'Repeat rule',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
  );
}

/**
 * Implements hook_clone_access_alter().
 */
function radar_event_clone_access_alter(&$access, $node) {
  // Administer content.
  if (user_access('administer content')) {
    return;
  }
  // Only events can be cloned.
  // This could also be done by setting the clone_omitted variable.
  if (! $node->type == 'event') {
    $access = FALSE;
  }
  // If the user otherwise has access to clone. Only clone for nodes
  // that are in one of their groups.
  if ($access) {
    $member = FALSE;
    $groups = og_get_entity_groups('node', $node);
    foreach ($groups as $group_type => $gids) {
      foreach ($gids as $gid) {
        if (og_is_member('node', $gid)) {
          $member = TRUE;
        }
      }
    }
    if (!$member) {
      $access = FALSE;
    }
  }
}

/**
 * Default value callback.
 *
 * Uses entityreference_prepopulate for og_group_ref field to retrieve group which
 * event is being posted from, to the retrieve any field collection location(s)
 * that it has.
 *
 * @see radar_event_field_default_field_instances().
 * @see radar_location_field_create_instance().
 */
function radar_event_entityreference_offline_prepopulate($entity_type, $entity, $field, $instance, $langcode) {
  $items = array();

  // reuse values inserted by entityreference_prepopulate.
  $ogfield = field_info_field('og_group_ref');
  $ogfield_instance = field_info_instance('node', 'og_group_ref', 'event');
  $ids = entityreference_prepopulate_get_values($ogfield, $ogfield_instance);
  $_GET['og_group_request'] = $_GET['og_group_ref'];
  $ogfield = field_info_field('og_group_request');
  $ogfield_instance = field_info_instance('node', 'og_group_request', 'event');
  $ids += entityreference_prepopulate_get_values($ogfield, $ogfield_instance);
  if (count($ids)) {
    foreach ($ids as $nid) {
      $node = node_load($nid);
      if (!empty($node->field_offline[LANGUAGE_NONE])) {
        $values[$nid] = $node->field_offline[LANGUAGE_NONE];
      }
    }
    if (!empty($values)) {
      // @todo there will be a function for this.
      foreach ($values as $value) {
        $items = array_merge($items, $value);
      }
    }
  }
  return $items;
}

/**
 * Default value callback: event date_time field.
 *
 * Get the related timezone from first location associated with a group that
 * the event is to be posted into - if it is in the
 * entityreference_prepopulate.
 *
 * This does however mean that the widget doesn't realize that this is the
 * first time that the value is being filled in.
 *
 * Default value for incoming from iCal is in radar_event_ical.
 */
function radar_event_date_time_prepopulate($entity_type, $entity, $field, $instance, $langcode) {
  $items = date_default_value($field, $instance, $langcode);

  // reuse values inserted by entityreference_prepopulate.
  $ogfield = field_info_field('og_group_ref');
  $ogfield_instance = field_info_instance('node', 'og_group_ref', 'event');
  $ids = entityreference_prepopulate_get_values($ogfield, $ogfield_instance);
  $_GET['og_group_request'] = $_GET['og_group_ref'];
  $ogfield = field_info_field('og_group_request');
  $ogfield_instance = field_info_instance('node', 'og_group_request', 'event');
  $ids += entityreference_prepopulate_get_values($ogfield, $ogfield_instance);
  if ($ids = entityreference_prepopulate_get_values($ogfield, $ogfield_instance)) {
    foreach ($ids as $nid) {
      $node = node_load($nid);
      $wrapper = entity_metadata_wrapper('node', $node);
      if (isset($wrapper->field_offline) && count($wrapper->field_offline) && isset($wrapper->field_offline[0]->field_timezone)) {
        $items[0]['timezone'] = $wrapper->field_offline[0]->field_timezone->value();
        break;
      }
    }
  }

  return $items;
}

/**
 * Getter callback to return date values as ISO date in inputted timezone.
 */
function radar_event_date_entity_metadata_struct_getter($item, array $options, $name, $type, $info) {
  $name = $name == 'time_start' ? 'value' : 'value2';
  $value = trim($item[$name]);
  if (empty($value)) {
    return NULL;
  }

  $timezone_db = !empty($item['timezone_db']) ? $item['timezone_db'] : 'UTC';
  $date = new DateObject($value, $timezone_db);
  if ($item['timezone']) {
    $date->setTimezone(new DateTimeZone($item['timezone']));
  }
  return !empty($date) ? date_format_date($date, 'custom', 'c') : NULL;
}
