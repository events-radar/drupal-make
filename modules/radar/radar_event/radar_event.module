<?php
/**
 * @file
 * Code for the Radar event feature.
 */

include_once 'radar_event.features.inc';

/**
 * Implements hook_radar_entity_integration().
 */
function radar_event_radar_entity_integration() {
  return array(
    'node' => array(
      'event' => array(
        'is_group_content' => TRUE,
      ),
    ),
  );
}

/**
 * Default value callback.
 *
 * Uses entityreference_prepopulate for og_group_ref field to retrieve group which
 * event is being posted from, to the retrieve any field collection location(s)
 * that it has.
 *
 * @see radar_event_field_deafult_field_instances().
 * @see radar_location_field_create_instance().
 */
function radar_event_entityreference_offline_prepopulate($entity_type, $entity, $field, $instance, $langcode) {
  $items = array();
  // reuse values inserted by entityreference_prepopulate.
  $instance['settings']['behaviors']['prepopulate']['status'] = TRUE;
  $field['field_name'] = 'og_group_ref';
  if ($ids = entityreference_prepopulate_get_values($field, $instance)) {
    foreach ($ids as $nid) {
      $node = node_load($nid);
      $values[$nid] = $node->field_offline[LANGUAGE_NONE];
    }
    if (!empty($values)) {
      // @todo there will be a function for this.
      foreach ($values as $value) {
        $items = array_merge($items, $value);
      }
    }
  }
  return $items;
}

/**
 * Default value callback: event date_time field.
 *
 * Get the related timezone from first location associated with a group that
 * the event is to be posted into - if it is in the
 * entityreference_prepopulate.
 *
 * This does however mean that the widget doesn't realize that this is the
 * first time that the value is being filled in.
 *
 * Default value for incoming from iCal is in radar_event_ical.
 */
function radar_event_date_time_prepopulate($entity_type, $entity, $field, $instance, $langcode) {
  $items = date_default_value($field, $instance, $langcode);

  // reuse values inserted by entityreference_prepopulate.
  $ogfield = field_info_field('og_group_ref');
  $ogfield_instance = field_info_instance('node', 'og_group_ref', 'event');
  if ($ids = entityreference_prepopulate_get_values($ogfield, $ogfield_instance)) {
    $nid = reset($ids);
    $node = node_load($nid);
    $wrapper = entity_metadata_wrapper('node', $node);
    if (isset($wrapper->field_offline) && count($wrapper->field_offline) && isset($wrapper->field_offline[0]->field_timezone)) {
      $items[0]['timezone'] = $wrapper->field_offline[0]->field_timezone->value();
    }
  }

  return $items;
}
