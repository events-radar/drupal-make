<?php
/**
 * @file
 * Code for the Event ical feature.
 */

include_once 'radar_event_ical.features.inc';

/**
 * Implements hook_date_ical_mapping_sources_alter().
 */
function radar_event_ical_date_ical_mapping_sources_alter(&$sources) {
  $sources['STATUS'] = array(
    'name' => t('Status'),
    'description' => t('If the event is confirmed, provisional or cancelled.'),
    'date_ical_parse_handler' => 'parseTextProperty',
    'date_ical_preprocess_callbacks' => array('radar_event_ical_status_preprocess_callback'),
  );
  $sources['X-RDR-COST'] = array(
    'name' => t('Cost: Text'),
    'description' => t('Cost - custom radar parameter'),
    'date_ical_parse_contrib_handler' => 'radar_event_ical_xprop_callback',
  );
}

/**
 * iCal parser process callback for X-RDR-COST
 */
function radar_event_ical_xprop_callback($property_key, calendarComponent $vcalendar_component) {
  $value = $vcalendar_component->getProperty($property_key);
  if (!empty($value[1])) {
    return $value[1];
  }
}

/**
 * iCal parser preprocess callback for STATUS.
 *
 * Validates the field so only known, valid, strings are saved in the field.
 */
function radar_event_ical_status_preprocess_callback(array $raw_components, $ndx, $property_key, calendarComponent $raw_component, &$mapping) {
  if (!empty($raw_component->status['value'])
    && !in_array($raw_component->status['value'], array('TENTATIVE', 'CONFIRMED', 'CANCELLED'))
  ) {
      $raw_component->status['value'] = NULL;
  }
  else {
    // Field it is mapped to uses lower case keys. It would be more correct
    // to do this is a target callback, but as we're already manipulating it.
    $raw_component->status['value'] = strtolower($raw_component->status['value']);
  }
}

/**
 * Implements hook_feeds_presave().
 *
 * Correct timezone such that the date field timezone is the timezone of the event.
 * iCal parser respects the timezone on a time (usually UTC Z), in preference to the
 * X-WR-TIMEZONE.
 */
function radar_event_ical_feeds_presave($source, $entity, $item, $entity_id) {
  if (!is_object($entity)) {
    return;
  }
  $wrapper = entity_metadata_wrapper('node', $entity);
  if (!count($wrapper->field_date_time)) {
    // no date.
    return;
  }
  if (!count($wrapper->field_offline)) {
    // no location.
    return;
  }
  // Retrieve the first date's timezone and compare with the first related
  // location's timezone.
  $location_timezone = $wrapper->field_offline[0]->field_timezone->value();
  try {
    $timezone = new DateTimeZone($location_timezone);
  }
  catch(Exception $e) {
    watchdog_exception('radar_event', $e);
    return;
  }
  $info = field_info_field('field_date_time');
  // Check each date instance and make consistent local time events.
  foreach ($wrapper->field_date_time as $key => $date_wrapper) {
    $data = $date_wrapper->raw();
    if ($data['timezone'] != $location_timezone) {
      if (isset($data['date'])) {
          //if (isset($data['value2']) && date_is_all_day($data['value'], $data['value2'])) {
        $date = new DateTime($data['value'], new DateTimezone($data['timezone']));
        $date->setTimezone($timezone);
        $data['value'] = $date->format(date_type_format($info['type']));
        $data['date']->setTimezone($timezone);
        $data['offset'] = $data['date']->getOffset();
        if (isset($data['value2'])) {
          $date2 = new DateTime($data['value2'], new DateTimezone($data['timezone']));
          $date2->setTimezone($timezone);
          $data['value2'] = $date2->format(date_type_format($info['type']));
          $data['offset2'] = $data['date']->getOffset();
        }
        $data['timezone'] = $location_timezone;
        $date_wrapper->set($data);
      }
    }
    $data = $date_wrapper->raw();
  }
}
