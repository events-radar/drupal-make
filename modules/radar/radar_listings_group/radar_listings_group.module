<?php
/**
 * @file
 * Code for the radar_listings_group feature.
 */

include_once 'radar_listings_group.features.inc';

/**
 * Implements hook_radar_entity_integration().
 */
function radar_listings_group_radar_entity_integration() {
  return array(
    'node' => array(
      'listings_group' => array(
        'is_group_content' => FALSE,
        'is_group' => TRUE,
        'exclude_radar_follow' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter.
 *
 * Add a submit handler to the group add form.
 * @see radar_listings_group_group_node_save().
 */
function radar_listings_group_form_group_node_form_alter(&$form, &$form_state) {
  if (!empty($_GET['og_group_ref']) && ($group = node_load($_GET['og_group_ref'])) && node_access('update', $group)) {
    $form['radar_listings_group']['#value'] = $group->nid;
    $form['actions']['submit']['#submit'][] = 'radar_listings_group_group_node_save';
  }
}

/**
 * If group node is posted from and by someone in a listings group add group to their listings group node.
 *
 * ground_node_form has this additional submission handler, if og_group_ref is in the URL and is a listings group.
 * This is to allow us to automatically add the created group into the listings group entity reference list.
 */
function radar_listings_group_group_node_save($form, &$form_state) {
  $node = $form_state['node'];
  if (!empty($form['radar_listings_group']['#value']) && ($group = node_load($form['radar_listings_group']['#value'])) && node_access('update', $group)) {
    $group = entity_metadata_wrapper('node', $group);
    $group->field_groups_listed[] = $node->nid;
    $group->save();
  }
}

/**
 * Add link to add new group to the listings view.
 */
function radar_listings_group_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->name == 'radar_listed_groups' && $display_id == 'page_1') {
    $query = drupal_get_destination();
    $query['og_group_ref'] = $args[0];
    $items[] = l(t('Add group'), 'node/add/group', array('query' => $query));
    $items[] = l(t('Add event in this group only'), 'node/add/event', array('query' => $query));
    $output = theme('item_list', array('items' => $items, 'attributes' => array('class' => 'action-links')));
    $view->set_item_option($display_id, 'header', 'area_text_custom', 'content', $output);
  }
}

/**
 * Add listings group to create content pane on groups.
 *
 * Bit hacky, but the alternative is re-making the pane plugin, and repeating almost
 * all of the og links code :-(
 */
function radar_listings_group_panels_pane_content_alter($content, $pane, $args, $contexts) {
  if ($content->module == 'og' && $content->type == 'node_create_links') {
    // Retrieve the og from the context. It's the first one.
    $context = reset($contexts);
    $group = $context->data;
    // Retrieve all entities that refer to this og with field_groups_listed.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'listings_group');
    $query->fieldCondition('field_groups_listed', 'target_id', $group->nid, '=');
    $results = $query->execute();
    // Loop over any results and make an array of listings_groups that refer to this group.
    if (!empty($results['node'])) {
      $listings_groups = array();
      foreach($results['node'] as $nid => $node) {
        $listings_groups[] = $nid;
      }
      // Add the nids comma seperated to og_group_ref
      $link =& $content->content['og_node_create_links']['#items'][0]['data'];
      $link = preg_replace('/og_group_ref=([0-9,]+)/', 'og_group_ref=${1},' . implode(',', $listings_groups), $link);
    }
  }
}
