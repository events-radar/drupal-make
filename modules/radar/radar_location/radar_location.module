<?php
/**
 * @file
 * Code for the Radar Location feature.
 */

include_once 'radar_location.features.inc';
/**
 * @file
 * Alterations for the location field collection.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function radar_location_ctools_plugin_directory($module, $plugin) {
  if ($module == 'addressfield' || $module == 'geocoder') {
    return 'plugins/' . $module . '/' . $plugin;
  }
}

function radar_location_ctools_plugin_post_alter(&$plugin, &$info) {
  if ($plugin['module'] == 'addressfield' && $plugin['type'] == 'address' && $plugin['name'] == 'address') {
    $plugin['format callback'] = 'radar_location_addressfield_format_generate_override';
  }
}

function radar_location_addressfield_format_generate_override(&$format, $address, $context = array()) {
  addressfield_format_address_generate($format, $address, $context);
  if ($format['street_block']['thoroughfare']['#title'] == t('Address 1')) {
    $format['street_block']['thoroughfare']['#title'] = t('Street address');
  }
  if ($format['street_block']['premise']['#title'] == t('Address 2')) {
    $format['street_block']['premise']['#title'] = t('Flat, Apartment, Box etc.');
  }
}

/**
 * Implements hook_form_alter().
 */
function radar_location_form_alter(&$form, &$form_state, $form_id) {
  // If the node edit form has a offline (embedded entity form) field load
  // the openlayers js already.
  if (substr($form_id, -10) == '_node_form' && !empty($form['field_offline'])) {
    openlayers_include();
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Change callbacks for geofield geocoding; so that we can get the address
 * field out of the field collection - now entity in inline entity form, but
 * it works the same.
 */
function radar_location_field_widget_geofield_openlayers_form_alter(&$element, &$form_state, $context) {
  foreach ($element as &$row) {
    if (isset($row['use_geocoder'])) {
      $row['use_geocoder']['#submit'] = array('radar_location_openlayers_use_geocoder_submit');
    }
  }
}

/**
* Implements hook_form_FORM_ID_alter().
*
* Add geofield feature layer to "Zoom to layer" behaviour.
* https://www.drupal.org/node/1809562
*/
function radar_location_form_ctools_export_ui_edit_item_form_alter(&$form, &$form_state) {
  // Check for geofield module presence
  if (module_exists('geofield')) {
    // Check if geofield behaviour is enabled (this form element will most likely be only in openlayers map edit form)
    if (drupal_array_get_nested_value($form, array('behaviors', 'openlayers_behavior_geofield', 'enabled', '#default_value'))) {
      // Check form has options that need to be altered
      if ($options = &drupal_array_get_nested_value($form, array('behaviors', 'openlayers_behavior_zoomtolayer', 'options_set', 'options', 'zoomtolayer', '#options'))) {
        // Append 'openlayers_behavior_geofield' layer to existing layers
        $options = array_merge($options, array('openlayers_behavior_geofield' => 'openlayers_behavior_geofield'));
      }
    }
  }
}

/**
 * Implements hook_field_info_alter().
 */
function radar_location_field_info_alter(&$info) {
  // Want to edit the property info to change the name of 'Full name' to 'Building name'.
  $info['addressfield']['property_callbacks'][] = 'radar_location_addressfield_property_info_callback';
}

/**
 * Callback to alter the property info of address fields.
 */
function radar_location_addressfield_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];
  $property['property info']['name_line']['label'] = t('Building name');
}

/**
 * Overrides openlayers_use_geocoder_submit().
 *
 * @see radar_location_field_widget_geofield_openlayers_form_alter().
 */
function radar_location_openlayers_use_geocoder_submit($form, &$form_state) {
  $button = $form_state['triggering_element'];

  // Go one level up in the form, to the widgets container.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  $delta = $element['#delta'];
  $parents = $element['#field_parents'];
  // The collection is the parent of the button, but also the field.
  // This is then used to get the value to geocode when
  // gecoder_widget_get_field_value is called.
  $collection_value =& drupal_array_get_nested_value($form_state['input'], $parents);

  // Set the widget value based on geocoding results.
  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
  $geocoder_field = $field_state['instance']['widget']['settings']['geocoder_field'];
  if ($field_value = geocoder_widget_get_field_value($element['#entity_type'], $field_state['instance'], NULL, $collection_value[$geocoder_field][$langcode])) {
    geophp_load();
    $geometry = geoPHP::load($field_value[$langcode][$delta]['geom']);
    $field_value[$langcode][$delta]['geom'] = $geometry->out('wkt'); // OpenLayers can only use WKT, so translate
    $field_value[$langcode][$delta]['input_format'] = 'wkt';
    // Override the field's value in the 'input' array to substitute the new
    // field value for the one that was submitted.
    drupal_array_set_nested_value($form_state, array_merge(array('values'), $parents, array($field_name)), $field_value);
  }
}


/**
 * Override the default country list
 */
function radar_location_countries_alter(&$countries) {
  // No idea if this hook can be called too early, but the predefined list can.
  // Like drupal_alter is there so early.
  $t = get_t();

  // Adding Catalonia to the country list.
  $countries['XC'] = $t('Catalonia');
  // Basque - Euskadi (hence E)
  $countries['XE'] = $t('Basque');
  // Kosovo
  $countries['XK'] = $t('Kosovo');
  // Renaming Palestine.
  $countries['PS'] = $t('Palestine');
    ;

  // Sort the list
  natcasesort($countries);
}
