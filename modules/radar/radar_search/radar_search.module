<?php
/**
 * @file
 * Code for the Radar search feature.
 */

include_once 'radar_search.features.inc';

/**
 * Implements hook_permissions().
 */
function radar_search_permission() {
  return array(
    'search content' => array(
      'title' => t('Search content'),
      'description' => t('Replacement for core search permission. Used by services seach api.'),
    ),
  );
}

/**
 * Implements hook_facetapi_url_processors().
 */
function radar_search_facetapi_url_processors() {
  return array(
    'radar_search_pretty_paths' => array(
      'handler' => array(
        'label' => t('Radar pretty paths'),
        'class' => 'FacetapiUrlProcessorPrettyPathsRadar',
      ),
    ),
  );
}

/**
 * Implements hook_facetapi_searcher_info_alter().
 *
 * Alter search descriptions to add our class in place of pretty_paths.
 *
 * @param array &$searcher_info
 *   The return values of hook_facetapi_searcher_info() implementations.
 */
function radar_search_facetapi_searcher_info_alter(array &$searcher_info) {
  foreach ($searcher_info as &$info) {
    // Activate pretty paths optionally per searcher, as configured.
    $id = 'facetapi_pretty_paths_searcher_' . $info['name'];
    $info['url processor'] = variable_get($id) ? 'radar_search_pretty_paths' : 'standard';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Just clarify our alteration of pretty paths.
 */
function radar_search_form_facetapi_pretty_paths_admin_form_alter(&$form, $form_state) {
  $form['searcher']['#title'] .= ' ' . t('(Radar altered)');
}

/**
* Implements hook_views_data_alter()
*/
function radar_search_views_data_alter(&$data) {
  foreach (search_api_index_load_multiple(FALSE) as $index) {
    $key = 'search_api_index_' . $index->machine_name;
    $type_info = search_api_get_item_type_info($index->item_type);
    if ($type_info['entity_type'] == 'node') {
      $table = &$data[$key];
      $table['clone_node'] = array(
        'field' => array(
          'title' => t('Clone link'),
          'help' => t('Provide a simple link to clone the node.'),
          'handler' => 'views_handler_field_node_link_clone',
        ),
      );
    }
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Adds any selected facets to the page title and description.
 */
function radar_search_preprocess_page(&$vars) {
  $facets_list = radar_search_page_facets();
  if ($facets_list) {
    $title = drupal_set_title();
    if (empty($title)) {
      $title = menu_get_active_title();
    }
    $facets_title = array();
    $facets_meta = array();
    foreach ($facets_list as $field_name => $facet_items) {
      $these_items = implode(', ', $facet_items);
      $facets_title[] = $these_items;
      if ($field_name == 'field_category' || $field_name == 'field_topic') {
        $facets_meta['topic'][] = $these_items;
      }
      if ($field_name == 'search_api_aggregation_1') {
        $facets_meta['date'][] = $these_items;
      }
      if ($field_name == 'day') {
        $facets_meta['day'][] = $these_items;
      }
       if ($field_name == 'og_group_ref') {
        $facets_meta['group'][] = $these_items;
      }
      if (substr($field_name, 0, 13) == 'field_offline') {
        $facets_meta['location'][] = $these_items;
      }
    }
    $facets_string = '';
    if (!empty($facets_meta['location'])) {
      $facets_string .= t('in @location', array('@location' => implode(', ', $facets_meta['location']))) . ' ';
    }
    if (!empty($facets_meta['date'])) {
      $facets_string .= t('in @year_or_month', array('@year_or_month' => implode(', ', $facets_meta['date']))) . ' ';
    }
    if (!empty($facets_meta['day'])) {
      $facets_string .= t('on @day', array('@day' => implode(', ', $facets_meta['day']))) . ' ';
    }
    if (!empty($facets_meta['group'])) {
      $facets_string .= t('organised, published or involving @group', array('@group' => implode(', ', $facets_meta['group']))) . ' ';
    }
    if (!empty($facets_meta['topic'])) {
      $facets_string .= ': ' . implode(' - ', $facets_meta['topic']);
    }
    $element = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'description',
        'content' => t('Alternative and radical @type @facets_string', array('@type' => strtolower($title), '@facets_string' => $facets_string)),
      ),
    );
    drupal_set_title($title . ': ' . implode(', ', $facets_title));
    drupal_add_html_head($element, 'radar_search:description');
  }
}

/**
 * Retrieve human readable names of the active facets on current page.
 */
function radar_search_page_facets() {
  $facets = array();
  if ($searchers = facetapi_get_active_searchers()) {
    $searcher = reset($searchers);
    $adapter = facetapi_adapter_load($searcher);
    foreach ($adapter->getAllActiveItems() as $item) {
      $markup = $adapter->getMappedValue($item['facets'][0], $item['value']);
      // Special case day.
      if ($item['field alias'] == 'search_api_aggregation_1' && strlen($item['value']) == 10) {
        $facets['day'][] = empty($markup['#html']) ? check_plain($markup['#markup']) : strip_tags($markup['#markup']);
      }
      else {
        $facets[$item['field alias']][] = empty($markup['#html']) ? check_plain($markup['#markup']) : strip_tags($markup['#markup']);
      }
    }
  }
  return $facets;
}
