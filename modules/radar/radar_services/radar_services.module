<?php
/**
 * @file
 * Code for the Radar services feature.
 */

include_once 'radar_services.features.inc';


/**
 * Implements hook_services_resources_alter().
 */
function radar_services_services_resources_alter(&$resources) {
  // Add language parameter that we can access in the overriden entity
  // resource, to set the entity api base language.
  $language = array(
    'name' => 'language',
    'optional' => TRUE,
    'default value' => LANGUAGE_NONE,
    'type' => 'string',
    'description' => t('Language code for language preference when translation available.'),
    'source' => array('param' => 'language'),
  );
  foreach ($resources as $name => $resource) {
    if (substr($name, 0, 7) == 'entity_') {
      $resources[$name]['operations']['retrieve']['args'][] = $language;
      $resources[$name]['operations']['index']['args'][] = $language;
    }
    if ($name == 'search_api') {
      $resources[$name]['operations']['retrieve']['args'][] = $language;
      // also need our own callback to pass language onto entity resource.
      $resources[$name]['operations']['retrieve']['callback'] = '_radar_services_search_api_resource_retrieve';
      $resources[$name]['operations']['retrieve']['file'] = array(
        'type' => 'inc',
        'module' => 'radar_services',
        'name' => 'radar_services.resources',
      );
    }
  }
}

/**
 * Implements hook_services_entity_resource_info().
 */
function radar_services_services_entity_resource_info() {
  return array(
    'radar' => array(
      'title' => t('Radar entity resource'),
      'description' => t('Extends clean controller to support field level translation, and anything else we need.'),
      'class' => 'RadarServicesEntityResourceController',
    ),
  );
}

/**
 * Implements hook_services_request_preprocess_alter().
 */
function radar_services_services_request_preprocess_alter($controller, &$args, $options) {
  if ($controller['callback'] != '_radar_services_search_api_resource_retrieve') {
    return;
  }

  // Argument keys are numeric, but defined with name.
  // Retrieve the index just to be a bit more robust.
  $arg_keys = array();
  foreach ($controller['args'] as $key => $arg_definition) {
    $arg_keys[$arg_definition['name']] = $key;
  }

  //
  // Which date to show as default.
  //

  if ($args[$arg_keys['index']] == 'events' && (empty($args[$arg_keys['filter']]) && empty($_GET['facets']['date']))) {
    $args[$arg_keys['filter']] = array(
      '~and' => array(
        // End time (which if not set is the same as Start Time) 2 hours ago.
        'search_api_aggregation_3' => array(
          '~gt' => time() - 60 * 60 * 2,
        ),
      ),
    );
  }

  //
  // Add a limit to the number of results returned.
  //

  if (empty($args[$arg_keys['limit']]) || $args[$arg_keys['limit']] > 500) {
    $args[$arg_keys['limit']] = 500;
  }

  //
  // Which fields to show as default.
  //

  // Groups search. No fields defined.
  if ($args[$arg_keys['index']] == 'groups' && empty($args[$arg_keys['fields']])) {
    $args[$arg_keys['fields']] = array(
      'title',
      'uuid',
    );
  }
  if ($args[$arg_keys['index']] == 'events' && empty($args[$arg_keys['fields']])) {
    $args[$arg_keys['fields']] = array(
      'title',
      'uuid',
      'og_group_gid',
      'date_time',
      'offline',
      'category',
      'topic',
      'price',
      'link',
      'phone',
      'body',
      'image',
      'language',
      'created',
      'updated',
    );
  }
}

/**
 * Implements hook_globalredirect_active_path().
 *
 * Remove the /api path from globalredirect.
 * For hook patch see https://www.drupal.org/node/1438584.
 */
function radar_services_globalredirect_active_path($path, $alias) {
  return !(strpos($path, 'api') === 0);
}
